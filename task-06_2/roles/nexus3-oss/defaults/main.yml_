---
nexus_version: ''

# This var is calculated dynamically by the role and
# will hold the currently installed version if any
# /!\ It should never be set directly /!\
# nexus_version_running: <unset>

nexus_download_dir: '/tmp'
nexus_download_url: 'https://download.sonatype.com/nexus/3'
nexus_os_group: 'nexus'
nexus_os_user: 'nexus'
nexus_os_user_home_dir: '/home/{{ nexus_os_user }}'
nexus_os_max_filedescriptors: 65536  # minimum value for nexus > 3.5.x
nexus_installation_dir: '/opt'
nexus_data_dir: '/var/nexus'
nexus_timezone: 'UTC'  # java timezone
nexus_tmp_dir: "{{ (ansible_os_family == 'RedHat') | ternary('/var/nexus-tmp', '/tmp/nexus') }}"
nexus_script_dir: '{{ nexus_installation_dir }}/nexus-{{ nexus_version }}/etc/scripts'
nexus_plugin_urls: []
nexus_onboarding_wizard: false

# These are the default values for JVM Ram
# don't touch those unless you have read
# https://help.sonatype.com/repomanager3/system-requirements#SystemRequirements-Memory
# and you know what you are doing
# Note: those values probably belong to a host_vars files...
nexus_min_heap_size: "2703M"
nexus_max_heap_size: "{{ nexus_min_heap_size }}"
nexus_max_direct_memory: "{{ nexus_min_heap_size }}"

# Nexus Backup
nexus_backup_dir: '/var/nexus-backup'
nexus_backup_dir_create: true  # Shall we create the dir, or do you already have something in place?
nexus_restore_log: '{{ nexus_backup_dir }}/nexus-restore.log'
nexus_backup_configure: false  # Shall we configure backup ?
## For next schedule vars, see related schedule tasks settings
## https://github.com/ansible-ThoTeam/nexus3-oss/wiki/Scheduled-tasks-configuration#schedule-types-and-related-settings
nexus_backup_schedule_type: cron
nexus_backup_cron: "0 0 21 * * ?"  # See cron expression in nexus create task GUI
# nexus_backup_start_date_time: "yyyy-MM-dd'T'HH:mm:ss"
# nexus_backup_weekly_days: ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']
# nexus_backup_monthly_days: {{ range(1,32) | list + [999] }}
nexus_backup_rotate: false  # Shall we rotate backups
nexus_backup_rotate_first: false  # Shall we rotate before making the current backup ?
nexus_backup_keep_rotations: 4  # Keep 4 backup rotations by default (current + last 3)

# Nexus restore procedure:
# run ansible-playbook example.yml -e "nexus_restore_point=(# date of choice -> %Y-%m-%d-%H-%M-%S #)"
# nexus_restore_point: '2017-02-22-01-30-32' # Example format

# Nexus purge procedure:
# run ansible-playbook example.yml -e "nexus_purge=true"

# Nexus default properties
nexus_default_port: 8081
nexus_default_context_path: '/'
nexus_application_host: '{{ httpd_setup_enable | ternary("127.0.0.1", "0.0.0.0") }}'

# Nexus default admin password on first time install.
# This should not be set in your playbook.
# You can use your old password on the command line if
# you want to change your admin password after first install
# i.e.
# - Set your new password in nexus_admin_password
# - Run `ansible-playbook -i your/inventory.ini your_playbook.yml -e nexus_default_admin_password=oldpassword`
nexus_default_admin_password: 'admin123'
# Nexus admin password to set and use.
# Note: this should be vault encrypted in your playbook.
nexus_admin_password: 'admin'

nexus_anonymous_access: true

nexus_public_hostname: 'nexus.vm'
nexus_public_scheme: https

# How should the role access the API for provisionning
nexus_api_hostname: localhost
nexus_api_scheme: http
nexus_api_validate_certs: "{{ nexus_api_scheme == 'https' }}"
nexus_api_context_path: "{{ nexus_default_context_path }}"
nexus_api_port: "{{ nexus_default_port }}"

# security realms
nexus_nuget_api_key_realm: false
nexus_npm_bearer_token_realm: false
nexus_rut_auth_realm: false
# nexus_rut_auth_header: "CUSTOM_HEADER"
nexus_ldap_realm: false
nexus_docker_bearer_token_realm: false

# Enable/disable audit capability
nexus_audit_enabled: false

# email server
nexus_email_server_enabled: false
nexus_email_server_host: "localhost"
nexus_email_server_port: 25
nexus_email_server_username: ""
nexus_email_server_password: ""
nexus_email_from_address: "nexus@example.org"
nexus_email_subject_prefix: ""
nexus_email_tls_enabled: false
nexus_email_tls_required: false
nexus_email_ssl_on_connect_enabled: false
nexus_email_ssl_check_server_identity_enabled: false
nexus_email_trust_store_enabled: false

nexus_branding_header: ""
nexus_branding_footer: "Last provisionned {{ ansible_date_time.iso8601 }}"

httpd_setup_enable: false
httpd_server_name: "{{ nexus_public_hostname }}"
httpd_default_admin_email: "admin@example.com"
httpd_ssl_certificate_file: 'files/nexus.vm.crt'
httpd_ssl_certificate_key_file: 'files/nexus.vm.key'
# httpd_ssl_certificate_chain_file: "{{ httpd_ssl_certificate_file }}"
# If httpd_copy_ssl_files is false you need to provide the following variables:
# - httpd_ssl_cert_file_location
# - httpd_ssl_cert_key_location
# - httpd_ssl_cert_chain_file_location <= optionnal. Leave unset if none
httpd_copy_ssl_files: true
# These specifies to the vhost file where to find on the remote file system the certificates files.
httpd_ssl_cert_file_location: "/etc/pki/tls/certs/nexus.vm.crt"
httpd_ssl_cert_key_location: "/etc/pki/tls/private/nexus.vm.key"
# httpd_ssl_cert_chain_file_location: "{{ httpd_ssl_cert_file_location }}"

ldap_connections: []
# example ldap config :
#  - ldap_name: 'My Company LDAP' # used as a key to update the ldap config
#    ldap_protocol: 'ldaps' # ldap or ldaps
#    ldap_hostname: 'ldap.mycompany.com'
#    ldap_port: 636
#    ldap_use_trust_store: false  # Wether or not to use certs in nexus trust store
#    ldap_auth: 'simple' or 'none'
#    ldap_auth_username: 'username' (or DN)   (optional)
#    ldap_auth_password: 'password'           (optional)
#    ldap_search_base: 'dc=mycompany,dc=net'
#    ldap_user_base_dn: 'ou=users'
#    ldap_user_filter: '(cn=*)' # (optional)
#    ldap_user_object_class: 'inetOrgPerson'
#    ldap_user_id_attribute: 'uid'
#    ldap_user_real_name_attribute: 'cn'
#    ldap_user_email_attribute: 'mail'
#    ldap_group_base_dn: 'ou=groups'
#    ldap_group_object_class: 'posixGroup'
#    ldap_group_id_attribute: 'cn'
#    ldap_group_member_attribute: 'memberUid'
#    ldap_group_member_format: '${username}'

# http proxy
nexus_with_http_proxy: false
nexus_http_proxy_host: "proxy.example.com"
nexus_http_proxy_port: 8080
nexus_http_proxy_username: ""
nexus_http_proxy_password: ""
nexus_with_https_proxy: false
nexus_https_proxy_host: "proxy.example.com"
nexus_https_proxy_port: 8080
nexus_https_proxy_username: ""
nexus_https_proxy_password: ""
nexus_proxy_exclude_hosts:
  - "localhost"
  - "127.*"
  - "[::1]"

nexus_config_maven: false
nexus_config_pypi: false
nexus_config_docker: false
nexus_config_raw: false
nexus_config_rubygems: false
nexus_config_bower: false
nexus_config_npm: false
nexus_config_nuget: false
nexus_config_gitlfs: false
nexus_config_yum: false
nexus_config_apt: false
nexus_config_helm: false
nexus_config_r: false
nexus_config_p2: false
nexus_config_conda: false
nexus_config_go: false

nexus_content_selectors: []
# example selector item :
#  - name: docker-login
#    description: Selector for docker login privilege
#    search_expression: format=="docker" and path=~"/v2/"

# also see _nexus_privilege_defaults below
nexus_privileges:
  - name: all-repos-read  # used as key to update a privilege
    description: 'Read & Browse access to all repos'
    repository: '*'
    actions:
      - read
      - browse

nexus_roles:
  - id: nx-uploader  # can map to a LDAP group id, also used as a key to update a role
    name: nx-uploader
    description: nx-uploader
    privileges:
      - nx-repository-view
    roles: []

nexus_local_users: 
  - username: uploader # used as key to update
    first_name: uploader
    last_name: uploader
    email: uploader@uploader.com
    password: "uploader"
    roles:
      - nx-uploader

nexus_ldap_users: []
# example user
#  - username: j.doe
#    state: present
#    roles:
#      - "nx-admin"

nexus_delete_default_repos: false

nexus_delete_default_blobstore: false

nexus_blobstores: []
# example blobstore item :
# - name: separate-storage
#   type: file
#   path: /mnt/custom/path
# - name: s3-blobstore
#   type: S3
#   config:
#     bucket: s3-blobstore
#     accessKeyId: "{{ VAULT_ENCRYPTED_KEY_ID }}"
#     secretAccessKey: "{{ VAULT_ENCRYPTED_ACCESS_KEY }}"

# Cleanup Polices
nexus_repos_cleanup_policies: []
#   - name: mvn_cleanup
#     format: maven2
#     mode:
#     notes: ""
#     criteria:
#       lastBlobUpdated: 60  # Optional
#       lastDownloaded: 120  # Optional
#       preRelease: RELEASES # Optional: PRERELEASES or RELEASES
#       regexKey: "foo.*"    # Optional




# raw repo support

_nexus_repos_raw_defaults:
  blob_store: "{{ nexus_blob_names.raw.blob }}"
  strict_content_validation: true
  version_policy: release  # release, snapshot or mixed
  layout_policy: strict  # strict or permissive
  write_policy: allow_once  # one of "allow", "allow_once" or "deny"
  maximum_component_age: 1440  # Nexus gui default. For proxies only
  maximum_metadata_age: 1440  # Nexus gui default. For proxies only
  negative_cache_enabled: true  # Nexus gui default. For proxies only
  negative_cache_ttl: 1440  # Nexus gui default. For proxies only


#nexus_repos_raw_proxy:
#  - name: ubuntu-archive
#    remote_url: 'http://archive.ubuntu.com/ubuntu/'
    # maximum_component_age: 1440
    # maximum_metadata_age: 1440
    # negative_cache_enabled: true
    # negative_cache_ttl: 1440

nexus_repos_raw_hosted:
  - name: world-cloud-build
    version_policy: release
    write_policy: allow_once  # one of "allow", "allow_once" or "deny"

